''' =========================================================================================== '''
# Our Chat RESTful App

''' =========================================================================================== '''
# third-party imports
from flask import render_template
from flask import request
from flask import redirect
from flask import session
from flask import jsonify
from flask import abort

# local imports
from app import create_app
from app import models
from app import db
from env import FLASK_CONFIG

# pythong libraries
from datetime import datetime
from sqlalchemy import Column, DateTime
from sqlalchemy.sql import func

''' =========================================================================================== '''
# instantiate the app
app = create_app(FLASK_CONFIG)

''' =========================================================================================== '''
# define our routes

''' If user tries to access undefined page, post 404 error'''
@app.errorhandler(404)
def page_not_found(e):
	return render_template('home/404.html'), 404

'''
Description: Render the main chat view here from templates
Input: None
Return Type: HTML, a view generated by render_template()
'''
@app.route('/')
def chat_view():
	new_visitor = models.Visitor()
	db.session.add(new_visitor)
	db.session.commit()
	return render_template('home/index.html')

@app.route('/submit', methods=['POST'])
def subscribing():
    the_subscriber_fname = request.form['name']
    the_subscriber_email = request.form['email_address']

    # Making it so that the name appears with a capital first letter
    the_subscriber_fname = ' '.join(word[0].upper() + word[1:] for word in the_subscriber_fname.lower().split())

    new_db_subscriber = models.Subscriber(first_name=the_subscriber_fname, email=the_subscriber_email)
    print("new subscriber: ", new_db_subscriber.first_name, new_db_subscriber.email)

    db.session.add(new_db_subscriber)
    db.session.commit()

    return render_template('home/thankyou.html', first_name=the_subscriber_fname)
@app.route('/stats')
def statistics():
	#Gotta figure out how to get the last visitor to visit landing page

	recent_visitor = models.Visitor.query.order_by(models.Visitor.id.desc()).first()
	recent_visit_time = recent_visitor.time
	all_visits = models.Visitor.query.count()

	recent_subscriber = models.Subscriber.query.order_by(models.Subscriber.id.desc()).first()
	recent_subscribe_name = recent_subscriber.first_name
	all_signups = models.Subscriber.query.count()
	return render_template('home/stats.html', last_visit = recent_visit_time  , last_signup = recent_subscribe_name, total_visits = all_visits , total_signups = all_signups)

@app.route("/api/subscribers")
def subscribers():
	allSubs = models.Subscriber.query.all()
	jsonToReturn = []
	for subscriber in allSubs:
		jsonToReturn.append({'id': subscriber.id, 'first_name': subscriber.first_name, 'email': subscriber.email})
	return jsonify(jsonToReturn)

@app.route("/api/temp_hum")
def temp_hums():
	all_temp_hum = models.temp_hum.query.all()
	jsonToReturn = []
	for value in all_temp_hum:
		jsonToReturn.append(value.toDict())
	return jsonify(jsonToReturn)

@app.route("/api/temp_hum/create", methods=["POST"])
def create_temp_hum_reading():
	if not request.json:
		return abort(400)
	values = request.get_json()
	temp = values['temperature']
	hum = values['humidity']
	new_reading = models.temp_hum(temperature=temp, humidity=hum)
	db.session.add(new_reading)
	db.session.commit()

	return jsonify(new_reading.toDict()), 201

@app.route("/api/temp_hum/update/<int:entry_id>", methods=["PUT"])
def update_temp_hum_reading(entry_id):
	if not request.json:
		return abort(400)

	new_values = request.get_json()

	updated_reading = models.temp_hum.query.get(entry_id)

	if updated_reading is None:
		return abort(400)

	updated_reading.temperature = new_values['temperature']
	updated_reading.humidity = new_values['humidity']

	db.session.commit()

	return jsonify(updated_reading.toDict()), 201


@app.route("/api/temp_hum/delete/<int:entry_id>", methods=["DELETE"])
def delete_temp_hum_reading(entry_id):
	to_delete = models.temp_hum.query.get(entry_id)

	if to_delete is None:
		return abort(400)

	db.session.delete(to_delete)
	db.session.commit()

	return jsonify(to_delete.toDict()), 201

''' =========================================================================================== '''
# run the app
if __name__ == '__main__':
    app.run()
